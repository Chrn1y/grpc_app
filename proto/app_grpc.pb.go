// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AppClient is the client API for App service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AppClient interface {
	Add(ctx context.Context, in *AddValues, opts ...grpc.CallOption) (*Value, error)
	Sum(ctx context.Context, opts ...grpc.CallOption) (App_SumClient, error)
	Ones(ctx context.Context, in *Value, opts ...grpc.CallOption) (App_OnesClient, error)
	Repeat(ctx context.Context, opts ...grpc.CallOption) (App_RepeatClient, error)
}

type appClient struct {
	cc grpc.ClientConnInterface
}

func NewAppClient(cc grpc.ClientConnInterface) AppClient {
	return &appClient{cc}
}

func (c *appClient) Add(ctx context.Context, in *AddValues, opts ...grpc.CallOption) (*Value, error) {
	out := new(Value)
	err := c.cc.Invoke(ctx, "/app.App/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) Sum(ctx context.Context, opts ...grpc.CallOption) (App_SumClient, error) {
	stream, err := c.cc.NewStream(ctx, &App_ServiceDesc.Streams[0], "/app.App/Sum", opts...)
	if err != nil {
		return nil, err
	}
	x := &appSumClient{stream}
	return x, nil
}

type App_SumClient interface {
	Send(*Value) error
	CloseAndRecv() (*Value, error)
	grpc.ClientStream
}

type appSumClient struct {
	grpc.ClientStream
}

func (x *appSumClient) Send(m *Value) error {
	return x.ClientStream.SendMsg(m)
}

func (x *appSumClient) CloseAndRecv() (*Value, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Value)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *appClient) Ones(ctx context.Context, in *Value, opts ...grpc.CallOption) (App_OnesClient, error) {
	stream, err := c.cc.NewStream(ctx, &App_ServiceDesc.Streams[1], "/app.App/Ones", opts...)
	if err != nil {
		return nil, err
	}
	x := &appOnesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type App_OnesClient interface {
	Recv() (*Value, error)
	grpc.ClientStream
}

type appOnesClient struct {
	grpc.ClientStream
}

func (x *appOnesClient) Recv() (*Value, error) {
	m := new(Value)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *appClient) Repeat(ctx context.Context, opts ...grpc.CallOption) (App_RepeatClient, error) {
	stream, err := c.cc.NewStream(ctx, &App_ServiceDesc.Streams[2], "/app.App/Repeat", opts...)
	if err != nil {
		return nil, err
	}
	x := &appRepeatClient{stream}
	return x, nil
}

type App_RepeatClient interface {
	Send(*Value) error
	Recv() (*Value, error)
	grpc.ClientStream
}

type appRepeatClient struct {
	grpc.ClientStream
}

func (x *appRepeatClient) Send(m *Value) error {
	return x.ClientStream.SendMsg(m)
}

func (x *appRepeatClient) Recv() (*Value, error) {
	m := new(Value)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AppServer is the server API for App service.
// All implementations must embed UnimplementedAppServer
// for forward compatibility
type AppServer interface {
	Add(context.Context, *AddValues) (*Value, error)
	Sum(App_SumServer) error
	Ones(*Value, App_OnesServer) error
	Repeat(App_RepeatServer) error
	mustEmbedUnimplementedAppServer()
}

// UnimplementedAppServer must be embedded to have forward compatible implementations.
type UnimplementedAppServer struct {
}

func (UnimplementedAppServer) Add(context.Context, *AddValues) (*Value, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedAppServer) Sum(App_SumServer) error {
	return status.Errorf(codes.Unimplemented, "method Sum not implemented")
}
func (UnimplementedAppServer) Ones(*Value, App_OnesServer) error {
	return status.Errorf(codes.Unimplemented, "method Ones not implemented")
}
func (UnimplementedAppServer) Repeat(App_RepeatServer) error {
	return status.Errorf(codes.Unimplemented, "method Repeat not implemented")
}
func (UnimplementedAppServer) mustEmbedUnimplementedAppServer() {}

// UnsafeAppServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AppServer will
// result in compilation errors.
type UnsafeAppServer interface {
	mustEmbedUnimplementedAppServer()
}

func RegisterAppServer(s grpc.ServiceRegistrar, srv AppServer) {
	s.RegisterService(&App_ServiceDesc, srv)
}

func _App_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddValues)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.App/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).Add(ctx, req.(*AddValues))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_Sum_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AppServer).Sum(&appSumServer{stream})
}

type App_SumServer interface {
	SendAndClose(*Value) error
	Recv() (*Value, error)
	grpc.ServerStream
}

type appSumServer struct {
	grpc.ServerStream
}

func (x *appSumServer) SendAndClose(m *Value) error {
	return x.ServerStream.SendMsg(m)
}

func (x *appSumServer) Recv() (*Value, error) {
	m := new(Value)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _App_Ones_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Value)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AppServer).Ones(m, &appOnesServer{stream})
}

type App_OnesServer interface {
	Send(*Value) error
	grpc.ServerStream
}

type appOnesServer struct {
	grpc.ServerStream
}

func (x *appOnesServer) Send(m *Value) error {
	return x.ServerStream.SendMsg(m)
}

func _App_Repeat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AppServer).Repeat(&appRepeatServer{stream})
}

type App_RepeatServer interface {
	Send(*Value) error
	Recv() (*Value, error)
	grpc.ServerStream
}

type appRepeatServer struct {
	grpc.ServerStream
}

func (x *appRepeatServer) Send(m *Value) error {
	return x.ServerStream.SendMsg(m)
}

func (x *appRepeatServer) Recv() (*Value, error) {
	m := new(Value)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// App_ServiceDesc is the grpc.ServiceDesc for App service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var App_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "app.App",
	HandlerType: (*AppServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _App_Add_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Sum",
			Handler:       _App_Sum_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Ones",
			Handler:       _App_Ones_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Repeat",
			Handler:       _App_Repeat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "app.proto",
}
